# handlers/matches/recent.py

from aiogram import types
from aiogram.dispatcher import FSMContext
from keybords.menu import get_numbers_menu, get_matches_menu
from loader import bot
from services.recent import build_recent_matches_summary
from states import UserState
from database.db import get_user_steam_id
from utils.converters import resolve_input_to_account_id


async def cmd_recent(message: types.Message, state: FSMContext):
    text = message.text.strip()
    parts = text.split(maxsplit=1)

    if text == "üéÆ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã":
        await message.answer("–°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–µ–π –ø–æ–∫–∞–∑–∞—Ç—å? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.", reply_markup=get_numbers_menu())
        await state.set_state(UserState.waiting_for_recent_count)
        return

    current_state = await state.get_state()
    if current_state == UserState.waiting_for_recent_count.state:
        count_str = text
    elif len(parts) == 2:
        count_str = parts[1]
    else:
        await message.answer("–°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–µ–π –ø–æ–∫–∞–∑–∞—Ç—å? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
        await state.set_state(UserState.waiting_for_recent_count)
        return

    if not count_str.isdigit():
        await message.answer("‚ùó –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
        return

    count = int(count_str)
    if count < 1 or count > 10:
        await message.answer("‚ùó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10.")
        return

    await state.set_state(UserState.idle)

    telegram_id = message.from_user.id
    steam_input = await get_user_steam_id(telegram_id)
    if not steam_input:
        await message.answer("‚ö†Ô∏è –¢—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /setsteam.")
        return

    account_id = resolve_input_to_account_id(steam_input)
    summary = await build_recent_matches_summary(account_id, count)
    await message.answer(summary, reply_markup=get_matches_menu())
