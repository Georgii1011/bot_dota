# handlers/heroes/contr.py

from aiogram import types
from aiogram.dispatcher import FSMContext

from states import UserState
from services.contr import build_counters_summary
from utils.errors import log_exception

async def cmd_contr(message: types.Message, state: FSMContext):
    try:
        text = message.text.strip()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ —Å –∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "üõ° –ö–æ–Ω—Ç—Ä–ø–∏–∫–∏")
        if text == "üõ° –ö–æ–Ω—Ç—Ä–ø–∏–∫–∏" or text == "/contr":
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∏–º—è –≥–µ—Ä–æ—è:")
            await state.set_state(UserState.waiting_for_hero_name)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ –≤–∏–¥–µ: /contr axe
        parts = text.split(maxsplit=1)
        if len(parts) > 1 and parts[0] == "/contr":
            hero_name = parts[1]
            summary = build_counters_summary(hero_name)
            await message.answer(summary)
        else:
            # –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∏ –∏–º—è –≥–µ—Ä–æ—è –±–µ–∑ /contr
            summary = build_counters_summary(text)
            await message.answer(summary)

    except Exception as e:
        log_exception(e, context="cmd_contr")
        await message.answer("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å –≤–≤–æ–¥.")

async def process_hero_name(message: types.Message, state: FSMContext):
    text = message.text.strip()

    if text.startswith("/"):
        await state.finish()
        return False

    summary = build_counters_summary(text)
    if summary.startswith("–ì–µ—Ä–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω"):
        await message.answer(summary + "\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏ /contr –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
        return True

    await message.answer(summary)
    await state.finish()
    return True


